# -*- coding: utf-8 -*-
"""stockPeditionProgram.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/138WY6xL_mfC4nu9-t9-YD5r2L_xScWUH
"""

# This program predicts stock prices by using machine learning models
#install the dependencies
import quandl
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.model_selection import train_test_split

#Get the stock data
df = quandl.get("WIKI/AMZN")
# Take a look at the data
print(df.head())

# Get the Ajusted Close Price
df = df[['Adj. Close']]
#Take a look at the new data
print (df.head())

# A varible for prediting 'n' days out into the future
forecast_out = 30
#Create another column (the Target or dependent varible) shifted 'n' units up
df['Prediction']= df[['Adj. Close']].shift(-forecast_out)
#print the new data set
print(df.tail())

### Create the independt data set (X)######
#Convert the dataframe to numpy to array
X = np.array(df.drop(['Prediction'],1))
#Remove the last 'n' rows
X = X[:-forecast_out]
print(X)

### Create the dependt data set (y) #####
# Convert the dataframe to a numpy array (All of the values including the NaN's)
y = np.array(df['Prediction'])
# Get all the of the y values except the last 'n' rows
y = y[:-forecast_out]
print(y)

# Split the data into 80% training and 20% testing
x_train,x_test, y_train, y_test = train_test_split(X,y,test_size=0.2)

#Create and train the Support Vector Machine (Regeressor)
svr_rbf = SVR(kernel = 'rbf', C=1e3, gamma=0.1)
svr_rbf.fit(x_train, y_train)

#Testing model: Score returns the coefficient of determination R^2 of the predition.
# The best possible score is 1.0
svm_cinfidence = svr_rbf.score(x_test, y_test)
print("svm confidence: ", svm_cinfidence)

# Create and train the linear Regression Model
lr = LinearRegression()
#Train the model
lr.fit(x_train, y_train)

#Testing model: Score returns the coefficient of determination R^2 of the predition.
# The best possible score is 1.0
lr_cinfidence = lr.score(x_test, y_test)
print("lr confidence: ", lr_cinfidence)

# Set x_forecast equal to the last 30 rows of the original data set from Adj. Close column
x_forecast = np.array(df.drop(['Prediction'],1))[-forecast_out:]
print(x_forecast)

# Print linear regression model predition for the next 'n' days
lr_prediction = lr.predict(x_forecast)
print(lr_prediction)

# Print support vector regressor model predition for the next 'n' days
svm_predition = svr_rbf.predict(x_forecast)
print(svm_predition)
